source('~/GitHub/RepData_PeerAssessment1/scrap.R')
source('~/GitHub/RepData_PeerAssessment1/scrap.R')
g
?aes
source('~/GitHub/RepData_PeerAssessment1/scrap.R')
g
source('~/GitHub/RepData_PeerAssessment1/scrap.R')
source('~/GitHub/RepData_PeerAssessment1/scrap.R')
g
?geom_line
source('~/GitHub/RepData_PeerAssessment1/scrap.R')
g
?aes
source('~/GitHub/RepData_PeerAssessment1/scrap.R')
g
?title
?main
source('~/GitHub/RepData_PeerAssessment1/scrap.R')
g
?theme
source('~/GitHub/RepData_PeerAssessment1/scrap.R')
source('~/GitHub/RepData_PeerAssessment1/scrap.R')
source('~/GitHub/RepData_PeerAssessment1/scrap.R')
g
source('~/GitHub/RepData_PeerAssessment1/scrap.R')
g
source('~/GitHub/RepData_PeerAssessment1/scrap.R')
g
show_col(viridis_pal()(30))
source('~/GitHub/RepData_PeerAssessment1/scrap.R')
g
?theme
?element_rect
source('~/GitHub/RepData_PeerAssessment1/scrap.R')
g
source('~/GitHub/RepData_PeerAssessment1/scrap.R')
g
source('~/GitHub/RepData_PeerAssessment1/scrap.R')
g
source('~/GitHub/RepData_PeerAssessment1/scrap.R')
g
source('~/GitHub/RepData_PeerAssessment1/scrap.R')
g
source('~/GitHub/RepData_PeerAssessment1/scrap.R')
g
source('~/GitHub/RepData_PeerAssessment1/scrap.R')
g
source('~/GitHub/RepData_PeerAssessment1/scrap.R')
g
source('~/GitHub/RepData_PeerAssessment1/scrap.R')
table(dat$interval)
dat$interval[200:250]
source('~/GitHub/RepData_PeerAssessment1/scrap.R')
?which
intervalData[104]
dat[104]
dat[104,]
intervalData[104,]
max(intervalData$average_steps)
which(intervalData$average_steps == max(intervalData$average_steps), arr.ind = TRUE)
intervalData[105,]
mnd = dat
mnd
dat <- read.csv("activity.csv")
library(dplyr)
library(ggplot2)
library(viridis)
library(RColorBrewer)
gdat <- group_by(dat, date)
gdat <- summarise(gdat, stepsperday = sum(steps))
hist(gdat$stepsperday, main = "Frequencies of Steps-per-Day", xlab = "Steps-per-Day", col = "lightgreen")
mean(gdat$stepsperday, na.rm = TRUE)
median(gdat$stepsperday, na.rm = TRUE)
fte_theme <- function() {
# Generate the colors for the chart procedurally with RColorBrewer
vi_pal = viridis_pal(option = 'D')(30)
rdg <- brewer.pal("RdGy", n = 11)
color.plotback = rdg[6]
color.panelback = rdg[7]
color.grid.major = rdg[6]
color.grid.minor = rdg[6]
color.axis.text = vi_pal[1]
color.axis.title = vi_pal[18]
color.title = vi_pal[1]
color.lines = vi_pal[0]
color.panelborder = vi_pal[18]
color.grid.ticks = vi_pal[18]
# Begin construction of chart
theme_bw(base_size=9) +
# Set the entire chart region to a light gray color
theme(panel.background=element_rect(fill=color.plotback, color=color.plotback)) +
theme(plot.background=element_rect(fill=color.panelback, color=color.panelback)) +
theme(panel.border=element_rect(color=color.panelborder, size = .5)) +
# Format the grid
theme(panel.grid.major=element_line(color=color.grid.major,size=.25)) +
theme(panel.grid.minor=element_line(color=color.grid.minor,size=.25)) +
theme(axis.ticks=element_line(color=color.grid.ticks,size=1)) +
# Format the legend, but hide by default
theme(legend.position="none") +
theme(legend.background = element_rect(fill=color.plotback)) +
theme(legend.text = element_text(size=7,color=color.axis.title)) +
# Set title and axis labels, and format these and tick marks
theme(plot.title=element_text(color=color.title, size=10, vjust=1.25)) +
theme(axis.text.x=element_text(size=7,color=color.axis.text)) +
theme(axis.text.y=element_text(size=7,color=color.axis.text)) +
theme(axis.title.x=element_text(size=8,color=color.axis.title, vjust=0)) +
theme(axis.title.y=element_text(size=8,color=color.axis.title, vjust=1.25)) +
# Plot margins
theme(plot.margin = unit(c(1, 1, 1, 1), "cm"))
}
dat$intervalgroup = c(0:17567)
for(i in 0:17567)
{
dat$intervalgroup[i] = dat$intervalgroup[i]%%288
}
vi_pal = viridis_pal()(30)
intervalMeans = aggregate(steps ~ intervalgroup, data = dat, mean)
intervalData = as.data.frame(intervalMeans)
names(intervalData) = c("interval_group", "average_steps")
g <- ggplot(intervalData) + geom_line(aes(interval_group, average_steps), col = vi_pal[1]) +
xlab("Interval Group") + ylab("Average Steps") +
labs(title = "Interval Group Averages Over 61-Day Period")   + fte_theme()
g
which(intervalData$average_steps == max(intervalData$average_steps), arr.ind = TRUE)
sum(is.na(dat$steps))
for(i in 0:17568)
{
if(is.na(dat$steps))
{
dat$steps = intervalData$average_steps[i%%288]
}
}
is.na(dat$steps[50])
dat[17568]
dat[17567]
dat[17567,]
dat[17568,]
dat[17569,]
dat[0,]
dat$intervalgroup[1]
dat$intervalgroup[17568]
dat$intervalgroup[17567]
dat$steps[17568]
dat$steps[17567]
mynewdat = data.frame(dat)
intervalData$average_steps[140]
length(intervalData$average_steps)
intervalData[288]
intervalData[288,]
intervalData[289,]
intervalData[0,]
which(intervalData$interval_group == 0)
which(intervalData$interval_group == 0, arr.ind = TRUE)
intervalData[286:291,]
dat$intervalgroup[286:291,]
dat[286:291,]
dat[0]
head(dat)
str(dat)
dat[0,]
dat <- read.csv("activity.csv")
dat[0,]
dat[1,]
dat <- dat[-c(0)]
dat[1]
dat[1,]
dat[0,]
dat[2,]
dat[3,]
dat <- read.csv("activity.csv")
dat <- dat[-c(0),]
dat[1,]
dat[0,]
dat[2,]
dat <- read.csv("activity.csv")
dat[2,]
dat[1,]
dat[0,]
dat[17569,]
dat[17568,]
dat$intervalgroup = c(1,17568)
dat[17568,]
dat <- read.csv("activity.csv")
newdat = data.frame(dat)
nicedat = groupby(newdat, date)
nicedat = group_by(newdat, date)
?coord_fixed
source('~/GitHub/RepData_PeerAssessment1/scrap.R')
f
h
source('~/GitHub/RepData_PeerAssessment1/scrap.R')
h
source('~/GitHub/RepData_PeerAssessment1/scrap.R')
source('~/GitHub/RepData_PeerAssessment1/scrap.R')
h
source('~/GitHub/RepData_PeerAssessment1/scrap.R')
h
source('~/GitHub/RepData_PeerAssessment1/scrap.R')
h
source('~/GitHub/RepData_PeerAssessment1/scrap.R')
source('~/GitHub/RepData_PeerAssessment1/scrap.R')
h
source('~/GitHub/RepData_PeerAssessment1/scrap.R')
source('~/GitHub/RepData_PeerAssessment1/scrap.R')
h
source('~/GitHub/RepData_PeerAssessment1/scrap.R')
h
source('~/GitHub/RepData_PeerAssessment1/scrap.R')
h
source('~/GitHub/RepData_PeerAssessment1/scrap.R')
h
source('~/GitHub/RepData_PeerAssessment1/scrap.R')
source('~/GitHub/RepData_PeerAssessment1/scrap.R')
h
source('~/GitHub/RepData_PeerAssessment1/scrap.R')
h
source('~/GitHub/RepData_PeerAssessment1/scrap.R')
h
?scale_color_viridis
?discrete_scale
?continuous_scale
?scale_fill_gradient
?viridis
?viridis.map
?viridisMap
library("scales")
source('~/GitHub/RepData_PeerAssessment1/scrap.R')
source('~/GitHub/RepData_PeerAssessment1/scrap.R')
source('~/GitHub/RepData_PeerAssessment1/scrap.R')
h
source('~/GitHub/RepData_PeerAssessment1/scrap.R')
f
h
source('~/GitHub/RepData_PeerAssessment1/scrap.R')
h
source('~/GitHub/RepData_PeerAssessment1/scrap.R')
h
source('~/GitHub/RepData_PeerAssessment1/scrap.R')
source('~/GitHub/RepData_PeerAssessment1/scrap.R')
source('~/GitHub/RepData_PeerAssessment1/scrap.R')
source('~/GitHub/RepData_PeerAssessment1/scrap.R')
source('~/GitHub/RepData_PeerAssessment1/scrap.R')
?scale_y_discrete
source('~/GitHub/RepData_PeerAssessment1/scrap.R')
h
?aes
?col
?scale_color_gradient2
show_col(viridis_pal()(30))
?scale_color_gradient2
show_col(viridis_pal()(30))
source('~/GitHub/RepData_PeerAssessment1/scrap.R')
H
h
source('~/GitHub/RepData_PeerAssessment1/scrap.R')
h
?scale_color_gradient2
?scale_color_gradient
source('~/GitHub/RepData_PeerAssessment1/scrap.R')
source('~/GitHub/RepData_PeerAssessment1/scrap.R')
source('~/GitHub/RepData_PeerAssessment1/scrap.R')
h
source('~/GitHub/RepData_PeerAssessment1/scrap.R')
h
source('~/GitHub/RepData_PeerAssessment1/scrap.R')
h
source('~/GitHub/RepData_PeerAssessment1/scrap.R')
hj
h
source('~/GitHub/RepData_PeerAssessment1/scrap.R')
h
?scale_y_log10
source('~/GitHub/RepData_PeerAssessment1/scrap.R')
h
source('~/GitHub/RepData_PeerAssessment1/scrap.R')
h
source('~/GitHub/RepData_PeerAssessment1/scrap.R')
h
source('~/GitHub/RepData_PeerAssessment1/scrap.R')
h
source('~/GitHub/RepData_PeerAssessment1/scrap.R')
source('~/GitHub/RepData_PeerAssessment1/scrap.R')
h
source('~/GitHub/RepData_PeerAssessment1/scrap.R')
h
source('~/GitHub/RepData_PeerAssessment1/scrap.R')
h
source('~/GitHub/RepData_PeerAssessment1/scrap.R')
?geom_boxplot
source('~/GitHub/RepData_PeerAssessment1/scrap.R')
h
source('~/GitHub/RepData_PeerAssessment1/scrap.R')
h
?order
source('~/GitHub/RepData_PeerAssessment1/scrap.R')
h
source('~/GitHub/RepData_PeerAssessment1/scrap.R')
h
source('~/GitHub/RepData_PeerAssessment1/scrap.R')
h
dat[1]
head(dat)
dat[1:30,]
source('~/GitHub/RepData_PeerAssessment1/scrap.R')
head(date)
head(dat)
typeof(dat$date[5])
as.numeric(dat$date[5])
dat$date[5]
dat$date[5]+1
dat$date = as.POSIXct(dat$date)
dat$date[5]+1
dat$date[5]+86400
source('~/GitHub/RepData_PeerAssessment1/scrap.R')
dat[1:30,]
source('~/GitHub/RepData_PeerAssessment1/scrap.R')
dat[1:30,]
source('~/GitHub/RepData_PeerAssessment1/scrap.R')
dat[1:30,]
dat[200:250,]
dat[1:30,]
source('~/GitHub/RepData_PeerAssessment1/scrap.R')
source('~/GitHub/RepData_PeerAssessment1/scrap.R')
source('~/GitHub/RepData_PeerAssessment1/scrap.R')
dat[1:50,]
dat[288:600,]
?rep
v = rep("day", 17568)
v
nicedata
dat <- read.csv("activity.csv")
library(dplyr)
library(ggplot2)
library(viridis)
library(RColorBrewer)
library(scales)
gdat <- group_by(dat, date)
gdat <- summarise(gdat, stepsperday = sum(steps))
hist(gdat$stepsperday, main = "Frequencies of Steps-per-Day", xlab = "Steps-per-Day", col = "lightgreen")
mean(gdat$stepsperday, na.rm = TRUE)
median(gdat$stepsperday, na.rm = TRUE)
fte_theme <- function() {
# Generate the colors for the chart procedurally with RColorBrewer
vi_pal = viridis_pal(option = 'D')(30)
rdg <- brewer.pal("RdGy", n = 11)
color.plotback = rdg[6]
color.panelback = rdg[7]
color.grid.major = rdg[6]
color.grid.minor = rdg[6]
color.axis.text = vi_pal[1]
color.axis.title = vi_pal[18]
color.title = vi_pal[1]
color.lines = vi_pal[0]
color.panelborder = vi_pal[18]
color.grid.ticks = vi_pal[18]
# Begin construction of chart
theme_bw(base_size=9) +
# Set the entire chart region to a light gray color
theme(panel.background=element_rect(fill=color.plotback, color=color.plotback)) +
theme(plot.background=element_rect(fill=color.panelback, color=color.panelback)) +
theme(panel.border=element_rect(color=color.panelborder, size = .5)) +
# Format the grid
theme(panel.grid.major=element_line(color=color.grid.major,size=.25)) +
theme(panel.grid.minor=element_line(color=color.grid.minor,size=.25)) +
theme(axis.ticks=element_line(color=color.grid.ticks,size=1)) +
# Format the legend, but hide by default
theme(legend.position="none") +
theme(legend.background = element_rect(fill=color.plotback)) +
theme(legend.text = element_text(size=7,color=color.axis.title)) +
# Set title and axis labels, and format these and tick marks
theme(plot.title=element_text(color=color.title, size=10, vjust=1.25)) +
theme(axis.text.x=element_text(size=7,color=color.axis.text)) +
theme(axis.text.y=element_text(size=7,color=color.axis.text)) +
theme(axis.title.x=element_text(size=8,color=color.axis.title, vjust=0)) +
theme(axis.title.y=element_text(size=8,color=color.axis.title, vjust=1.25)) +
# Plot margins
theme(plot.margin = unit(c(1, 1, 1, 1), "cm"))
}
dat$intervalgroup = c(1:17568)
for(i in 1:17568)
{
dat$intervalgroup[i] = dat$intervalgroup[i]%%288
}
vi_pal = viridis_pal()(30)
intervalMeans = aggregate(steps ~ intervalgroup, data = dat, mean)
intervalData = as.data.frame(intervalMeans)
names(intervalData) = c("interval_group", "average_steps")
g <- ggplot(intervalData) + geom_line(aes(interval_group, average_steps), col = vi_pal[1]) +
xlab("Interval Group") + ylab("Average Steps") +
labs(title = "Interval Group Averages Over 61-Day Period")   + fte_theme()
g
which(intervalData$average_steps == max(intervalData$average_steps), arr.ind = TRUE)
sum(is.na(dat$steps))
sum(is.na(dat$date))
sum(is.na(dat$interval))
standarddat = data.frame(dat)
for(i in 1:17568)
{
if(is.na(standarddat$steps[i]))
{
inde = i%%288 + 1
standarddat$steps[i] = intervalData$average_steps[inde]
}
}
nicedata <- group_by(standarddat, date)
nicedata <- summarise(nicedata, stepsperday = sum(steps))
hist(nicedata$stepsperday, main = "Frequencies of Steps-per-Day", xlab = "Steps-per-Day", col = "lightgreen")
mean(nicedata$stepsperday)
median(nicedata$stepsperday)
day = 0
standarddat$day = rep("day", 17568)
for(i in 1:61)
{
if(i%%6==0 || i%%7==0)
{
for(k in 1:288)
{
standarddat$day[day*288 + k] = "weekend"
}
day = day + 1
}
else
{
for(k in 1:288)
{
standarddat$day[day*288 + k] = "weekday"
}
day = day + 1
}
}
standarddat$day = as.factor(standarddat$day)
standarddat[1:30,]
str(standarddat)
?facet_grid
source('~/GitHub/RepData_PeerAssessment1/scrap.R')
source('~/GitHub/RepData_PeerAssessment1/scrap.R')
source('~/GitHub/RepData_PeerAssessment1/scrap.R')
f
show_col(viridis_pal()(15))
source('~/GitHub/RepData_PeerAssessment1/scrap.R')
source('~/GitHub/RepData_PeerAssessment1/scrap.R')
source('~/GitHub/RepData_PeerAssessment1/scrap.R')
source('~/GitHub/RepData_PeerAssessment1/scrap.R')
f
source('~/GitHub/RepData_PeerAssessment1/scrap.R')
f
source('~/GitHub/RepData_PeerAssessment1/scrap.R')
f
source('~/GitHub/RepData_PeerAssessment1/scrap.R')
f
source('~/GitHub/RepData_PeerAssessment1/scrap.R')
source('~/GitHub/RepData_PeerAssessment1/scrap.R')
source('~/GitHub/RepData_PeerAssessment1/scrap.R')
source('~/GitHub/RepData_PeerAssessment1/scrap.R')
source('~/GitHub/RepData_PeerAssessment1/scrap.R')
f
source('~/GitHub/RepData_PeerAssessment1/scrap.R')
f
source('~/GitHub/RepData_PeerAssessment1/scrap.R')
source('~/GitHub/RepData_PeerAssessment1/scrap.R')
f
source('~/GitHub/RepData_PeerAssessment1/scrap.R')
f
source('~/GitHub/RepData_PeerAssessment1/scrap.R')
f
source('~/GitHub/RepData_PeerAssessment1/scrap.R')
f
source('~/GitHub/RepData_PeerAssessment1/scrap.R')
f
show_col(viridis_pal()(10))
source('~/GitHub/RepData_PeerAssessment1/scrap.R')
source('~/GitHub/RepData_PeerAssessment1/scrap.R')
f
source('~/GitHub/RepData_PeerAssessment1/scrap.R')
f
source('~/GitHub/RepData_PeerAssessment1/scrap.R')
f
source('~/GitHub/RepData_PeerAssessment1/scrap.R')
source('~/GitHub/RepData_PeerAssessment1/scrap.R')
f
install.packages("gridExtra")
source('~/GitHub/RepData_PeerAssessment1/scrap.R')
source('~/GitHub/RepData_PeerAssessment1/scrap.R')
source('~/GitHub/RepData_PeerAssessment1/scrap.R')
source('~/GitHub/RepData_PeerAssessment1/scrap.R')
?aes
source('~/GitHub/RepData_PeerAssessment1/scrap.R')
f
source('~/GitHub/RepData_PeerAssessment1/scrap.R')
source('~/GitHub/RepData_PeerAssessment1/scrap.R')
source('~/GitHub/RepData_PeerAssessment1/scrap.R')
install.packages("cowplot")
source('~/GitHub/RepData_PeerAssessment1/scrap.R')
plot_grid(f, v, labels=c("weekdays", "weekends"), nrow=2, align="v")
str(weekenddata)
str(weekdaydata)
source('~/GitHub/RepData_PeerAssessment1/scrap.R')
str(weekdaydata)
str(weekenddata)
table(standarddat$day)
weekdaydata = subset(standarddat, day = "weekday")
str(weekdaydata)
?filter
source('~/GitHub/RepData_PeerAssessment1/scrap.R')
str(weekdaydata)
plot_grid(f, v, labels=c("weekdays", "weekends"), nrow=2, align="v")
source('~/GitHub/RepData_PeerAssessment1/scrap.R')
f
source('~/GitHub/RepData_PeerAssessment1/scrap.R')
f
source('~/GitHub/RepData_PeerAssessment1/scrap.R')
f
